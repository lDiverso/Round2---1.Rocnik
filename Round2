//=========================== ALL POSITIVES ===========================

#include <stdio.h>

int all_positives(const int size, const int array[]) {
    if (array == NULL)
        return -1;

    for (int i = 0; i < size; i++) {
        if (array[i] <= 0)
            return 0;
    }
    return 1;
}


int main() {

    const int array[] = {1,2,0,3,4,0};
    const int array2[] = {1,2,6,3,4,7};
    const int array3[] = {1,2,-1,3,4,-2};
    printf("%d %d %d\n", all_positives(6, array), all_positives(6, array2), all_positives(6, array3));


    return 0;
}

//=========================== BINARY NUM ===========================

#include <stdio.h>

int binary_num(const int num){

if(num > 1000 || num < -1000){
    return -1;
}
if(num == 1 || num == 0){
    return 1;
}
return 0;
}

int main() {
    printf("%d %d %d\n", binary_num(-1001), binary_num(3), binary_num(1));
}

//=========================== COUNT POSITIVES ===========================

#include <stdio.h>

int count_positives(const int size, const int array[]){

    int pocet = 0;
    for (int i = 0; i < size; ++i) {
        if(array[i] > 0){
            pocet++;
        }
    }
return pocet;
}

int main() {

const int array1[] = {1,2,0,3,4,0};
const int array2[] = {1,2,6,3,4,7};
const int array3[] = {-1,-2,0,-3,0,-2};

printf("%d %d %d\n", count_positives(6, array1), count_positives(6,array2),count_positives(6,array3));
}

//=========================== COUNT WHITES ===========================

#include <stdio.h>

int count_whites(const char string[]){

    int pocet = 0;
    for (int i = 0; i < string[i]; ++i) {
        if(string[i] == ' ' || string[i] == '\t' || string[i] == '\n'){
            pocet++;
        }
    }
return pocet;
}

int main() {
    const char string[] = "Hello, how are you?";
    printf("%d\n", count_whites(string));
}

//=========================== DIRRECTION CORRECTION ===========================

#include <stdio.h>

int direction_correction(const int degree) {

    int num = degree % 360;
    if(num % 90 == 0 && num > 0){
        return num;
    }
    return -1;
}

int main() {
    printf("%d %d %d\n", direction_correction(-90), direction_correction(540), direction_correction(180));
}

//=========================== DIV BY 3 ===========================

#include <stdio.h>

int div_by_3(const int num){

    if(num % 3 == 0){
        return 1;
    }
    return 0;
}

int main() {
    printf("%d %d %d\n", div_by_3(-3), div_by_3(6), div_by_3(8));
}

//=========================== FIND FIRST A ===========================

#include <stdio.h>

int find_first_A(const char string[]){

    if(string == NULL){
        return -1;
    }

int pos;
    for (int i = 0; i < string[i]; ++i) {
        if(string[i] == 'a' || string[i] == 'A'){
            pos = i;
        }
    }
return pos;
}

int main() {
    printf("%d\n", find_first_A("Tomorrow afternoon"));
}

//=========================== GUESS EVAL ===========================

#include <stdio.h>

int guess_eval(const int guess, const int my_number){

if(my_number == guess){
    return 1;
}
else if(my_number > guess){
    return 2;
}
    return 0;
}

int main() {
    printf("%d %d %d\n", guess_eval(34,22), guess_eval(22,34), guess_eval(34,34));
    return 0;
}

//=========================== CHANGE WHITES ===========================

#include <stdio.h>

void change_whites(char string[]){

    if(string == NULL){
        return;
    }

    for (int i = 0; i < string[i]; ++i) {
        if(string[i] == ' ' || string[i] == '\n'){
            string[i] = '.';
            i++;
        }
    }
}

int main() {
char str[] = "Hello world ! ";
change_whites(str);
printf("%s\n", str);

}

//=========================== IS WHITE ===========================

#include <stdio.h>

int is_white(const char c) {

if(c == ' ' || c == '\t' || c == '\n'){
        return 1;
    }
return 0;
}
int main() {
    printf("%d %d\n", is_white('#'), is_white(' '));
    return 0;
}

//=========================== LAST POSITIVE ===========================

#include <stdio.h>

int last_positive(const int size, const int array[]){

if(array == NULL){
    return -1;
}
    int num;
    for (int i = 0; i < size; ++i) {
        if(array[i] > 0){
            num = array[i];
            return num;
        }
    }
    return -1;
}

int main() {

const int array[] = {0,1,0};
const int array2[] = {-1,0,-6,-2};
    printf("%d %d\n", last_positive(3,array), last_positive(4, array2));
}

//=========================== LEAP YEAR ===========================

#include <stdio.h>

int leap_year(const int year){

    if(year < 1 || year > 4443){
        return -1;
    }
    if(year % 400 == 0){
        return 1;
    }
    if(year % 100 == 0){
        return 0;
    }
    if(year % 4 == 0){
        return 1;
    }
        return 0;
 }

int main() {
    printf("%d %d %d\n", leap_year(4000), leap_year(3000), leap_year(3004));
}

//=========================== SAME CASE ===========================

#include <stdio.h>
#include <ctype.h>

int same_case(const char a, const char b){

    if(!isalpha(a) || !isalpha(b)){
        return -1;
    }
    if(isupper(a) && isupper(b) || islower(a) && islower(b)) {
        return 1;
    }
        return 0;
}

int main() {
    printf("%d %d %d\n", same_case('a','f'), same_case('L','g'), same_case('#','P'));
}

//=========================== SWAP SIGN ===========================

#include <stdio.h>

void swap_sign(const int size, int array[]){

    for (int i = 0; i < size; ++i) {
        array[i] = (array[i] * -1);
    }
}

int main() {
    int array[] = {1,2,0,-3,4,0};
    swap_sign(6, array);
    for (int i = 0; i < 6; ++i) {
        printf("%d ", array[i]);
            }
    printf("\n");
}

//=========================== STRING TO UPPER ===========================

#include <stdio.h>
#include <ctype.h>

void string_to_upper(char string[]) {

    for (int i = 0; i < string[i]; ++i) {
        string[i] = toupper(string[i]);
    }
}

int main() {
    char string[] = "Hello, how are you?";
    string_to_upper(string);
    printf("%s\n", string);
}


